// Even Fibonacci numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four
// million, find the sum of the even-valued terms.

#[derive(Debug)]
struct FibCounter {
    a : u64,
    b : u64,
}

impl FibCounter {
    fn new() -> FibCounter {
        FibCounter { a : 1, b : 1 }
    }
}

impl Iterator for FibCounter {
    type Item = u64;
    fn next(&mut self) -> Option<Self::Item> {
        let c = self.a + self.b;
        self.a = self.b;
        self.b = c;
        Some(self.a)
    }
}

fn main() {
    let fib = FibCounter::new();
    let sum = fib.take_while(|x| x <= &4_000_000).filter(|x| x % 2 == 0).fold(0, |a, x| a + x);
    println!("sum = {:?}", sum);
}

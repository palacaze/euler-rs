// Triangular, pentagonal, and hexagonal
//
// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
// Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
// Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
// Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
//
// It can be verified that T285 = P165 = H143 = 40755.
//
// Find the next triangle number that is also pentagonal and hexagonal.

// an haxagonal number is always triangle, no need to test this property

#![feature(test)]
extern crate test;

fn pentagon(n: usize) -> usize {
    n * (3 * n -1) / 2
}

fn hexagon(n: usize) -> usize {
    n * (2 * n -1)
}

fn is_pentagon(pn: usize) -> bool {
    let s = (1.0 + 24.0 * pn as f32).sqrt();
    let n = ((1.0 + s) / 6.0) as usize;
    pentagon(n) == pn || pentagon(n+1) == n+1
}

pub fn solve() -> usize {
    for n in 144.. {
        let v = hexagon(n);
        if is_pentagon(v) {
            return v;
        }
    }
    0
}

fn main() {
    let sum = solve();
    println!("triangle, pentagonal and hexagonal = {:?}", sum);
}

#[cfg(test)]
mod tests {
    use super::*;
    use test::{Bencher, black_box};

    #[test]
    fn test_pb() {
        assert_eq!(1533776805, solve());
    }

    #[bench]
    fn bench_pb(b: &mut Bencher) {
        b.iter(|| black_box(solve()));
    }
}


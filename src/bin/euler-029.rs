// Distinct powers
//
// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//
//     2²=4,  2³=8,   2⁴=16,  2⁵=32
//     3²=9,  3³=27,  3⁴=81,  3⁵=243
//     4²=16, 4³=64,  4⁴=256, 4⁵=1024
//     5²=25, 5³=125, 5⁴=625, 5⁵=3125
//
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
//
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//
// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

// as 100^100 if very big, we have to use big ints

#![feature(test)]
extern crate test;

extern crate gmp;
use gmp::mpz::Mpz;

pub fn solve() -> usize {
    let mi = 2;
    let ma = 101;
    let mut v = Vec::with_capacity((ma - mi)*(ma - mi));

    for i in mi..ma {
        let bi = Mpz::from(i as u64);
        for j in mi..ma {
            v.push(bi.pow(j as u32));
        }
    }

    v.sort();
    v.dedup();
    v.len()
}

fn main() {
    let val = solve();
    println!("unique = {:?}", val);
}

#[cfg(test)]
mod tests {
    use super::*;
    use test::{Bencher, black_box};

    #[test]
    fn test_29() {
        assert_eq!(9183, solve());
    }

    #[bench]
    fn bench_29(b: &mut Bencher) {
        b.iter(|| black_box(solve()));
    }
}

